
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Objects.*;
import Classes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImagenes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImagenes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImagenes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImagenes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\005\003\000" +
    "\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\003\006\004\004\005\010\001\002\000" +
    "\004\006\023\001\002\000\004\002\000\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\022\001\002\000\004\006" +
    "\011\001\002\000\006\003\012\005\014\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufffd\001\002\000\006\007" +
    "\016\010\015\001\002\000\006\003\012\005\014\001\002" +
    "\000\010\002\ufff8\004\004\005\010\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufff9\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\001\001\002\000\006\003\012\005" +
    "\014\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\002\006\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\020" +
    "\001\001\000\006\003\017\005\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImagenes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImagenes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImagenes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Metodos
    Imagen imagenGenerada=new Imagen("");
	public ParserImagenes(LexicoImagenes lex) {
		super(lex);
	}
	@Override
        public void syntax_error(Symbol st) {
            //Reporte el error
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImagenes$actions {
  private final ParserImagenes parser;

  /** Constructor */
  CUP$ParserImagenes$actions(ParserImagenes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImagenes$do_action_part00000000(
    int                        CUP$ParserImagenes$act_num,
    java_cup.runtime.lr_parser CUP$ParserImagenes$parser,
    java.util.Stack            CUP$ParserImagenes$stack,
    int                        CUP$ParserImagenes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImagenes$result;

      /* select the action based on the action number */
      switch (CUP$ParserImagenes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-1)).value;
		RESULT = start_val;
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImagenes$parser.done_parsing();
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CREARIMAGEN 
            {
              Object RESULT =null;

              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CREARIMAGEN ::= ID LLAVEA SIGUIENTE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).value;
		imagenGenerada.setId(id.getLexeme());
   claseMain.listaImagenes.insertarImagen(imagenGenerada);
   claseMain.listaImagenes.ordenarLista();
   imagenGenerada=new Imagen("");
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("CREARIMAGEN",1, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CREARIMAGEN ::= ENTERO LLAVEA SIGUIENTE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).value;
		imagenGenerada.setId(id.getLexeme());
   claseMain.listaImagenes.insertarImagen(imagenGenerada);
   claseMain.listaImagenes.ordenarLista();
   imagenGenerada=new Imagen("");
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("CREARIMAGEN",1, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SIGUIENTE ::= ENTERO LLAVEB FINOINICIO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).value;
		imagenGenerada.insertarCapaCola(num.getLexeme());
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("SIGUIENTE",2, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SIGUIENTE ::= ENTERO COMA SIGUIENTE 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)).value;
		imagenGenerada.insertarCapaCola(num.getLexeme());
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("SIGUIENTE",2, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.elementAt(CUP$ParserImagenes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SIGUIENTE ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("SIGUIENTE",2, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FINOINICIO ::= CREARIMAGEN 
            {
              Object RESULT =null;

              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("FINOINICIO",3, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FINOINICIO ::= 
            {
              Object RESULT =null;

              CUP$ParserImagenes$result = parser.getSymbolFactory().newSymbol("FINOINICIO",3, ((java_cup.runtime.Symbol)CUP$ParserImagenes$stack.peek()), RESULT);
            }
          return CUP$ParserImagenes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImagenes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImagenes$do_action(
    int                        CUP$ParserImagenes$act_num,
    java_cup.runtime.lr_parser CUP$ParserImagenes$parser,
    java.util.Stack            CUP$ParserImagenes$stack,
    int                        CUP$ParserImagenes$top)
    throws java.lang.Exception
    {
              return CUP$ParserImagenes$do_action_part00000000(
                               CUP$ParserImagenes$act_num,
                               CUP$ParserImagenes$parser,
                               CUP$ParserImagenes$stack,
                               CUP$ParserImagenes$top);
    }
}

}
